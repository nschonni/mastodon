name: nschonni/mastodon/build-and-test
on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: cimg/ruby:3.0-node
      env:
        RAILS_ENV: test
    steps:
    - name: Set up bundler cache
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: .ruby-version
        bundler-cache: true
    - uses: actions/checkout@v3
    - uses: "./.github/actions/install-system-dependencies"
    - uses: "./.github/actions/install-ruby-dependencies"
      with:
        ruby-version: '3.0'
    - id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
    - uses: actions/cache@v3.2.2
      with:
        path: "${{ steps.yarn-cache-dir-path.outputs.dir }}"
        key: "${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}"
        restore-keys: "${{ runner.os }}-yarn-"
    - run: yarn install --frozen-lockfile
    - name: Precompile assets
      run: |-
        export NODE_OPTIONS=--openssl-legacy-provider
        ./bin/rails assets:precompile
    - uses: actions/upload-artifact@v3.1.1
      with:
        path: |-
          ./public/assets
          ./public/packs-test
  test:
    runs-on: ubuntu-latest
    container:
      image: ruby:${{ matrix.ruby-version }}
      env:
        BUNDLE_JOBS: 3
        BUNDLE_RETRY: 3
        CONTINUOUS_INTEGRATION: true
        DB_HOST: localhost
        DB_USER: root
        DISABLE_SIMPLECOV: true
        RAILS_ENV: test
    needs:
    - build
    env:
      ALLOW_NOPAM: true
      PAM_ENABLED: true
      PAM_DEFAULT_SERVICE: pam_test
      PAM_CONTROLLED_SERVICE: pam_test_controlled
    strategy:
      matrix:
        ruby-version:
        - '2.7'
        - '3.0'
    steps:
    - name: Set up bundler cache
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: .ruby-version
        bundler-cache: true
    - uses: actions/checkout@v3
    - uses: "./.github/actions/install-system-dependencies"
    - name: Install additional system dependencies
      run: sudo apt-get install -y ffmpeg imagemagick libpam-dev
    - name: Enable PAM authentication
      run: bundle config with 'pam_authentication'
    - uses: "./.github/actions/install-ruby-dependencies"
      with:
        ruby-version: "${{ matrix.ruby-version }}"
    - uses: actions/download-artifact@v3.0.1
      with:
        path: "."
    - uses: "./.github/actions/wait-db"
    - name: Load database schema
      run: "./bin/rails db:create db:schema:load db:seed"
    - run: bundle exec rspec spec --profile 10 --format RspecJunitFormatter --out /tmp/test-results/rspec/results.xml --format progress
  test-migrations:
    runs-on: ubuntu-latest
    container:
      image: ruby:${{ env.ruby-version }}
      env:
        BUNDLE_JOBS: 3
        BUNDLE_RETRY: 3
        CONTINUOUS_INTEGRATION: true
        DB_HOST: localhost
        DB_USER: root
        DISABLE_SIMPLECOV: true
        RAILS_ENV: test
    needs:
    - build
    steps:
    - name: Set up bundler cache
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: .ruby-version
        bundler-cache: true
    - uses: actions/checkout@v3
    - uses: "./.github/actions/install-system-dependencies"
    - uses: "./.github/actions/install-ruby-dependencies"
      with:
        ruby-version: '3.0'
    - uses: "./.github/actions/wait-db"
    - name: Create database
      run: "./bin/rails db:create"
    - name: Run migrations up to v2.0.0
      run: "./bin/rails db:migrate VERSION=20171010025614"
    - name: Populate database with test data
      run: "./bin/rails tests:migrations:populate_v2"
    - name: Run migrations up to v2.4.0
      run: "./bin/rails db:migrate VERSION=20180514140000"
    - name: Populate database with test data
      run: "./bin/rails tests:migrations:populate_v2_4"
    - name: Run migrations up to v2.4.3
      run: "./bin/rails db:migrate VERSION=20180707154237"
    - name: Populate database with test data
      run: "./bin/rails tests:migrations:populate_v2_4_3"
    - name: Run all remaining migrations
      run: "./bin/rails db:migrate"
    - name: Check migration result
      run: "./bin/rails tests:migrations:check_database"
  test-two-step-migrations:
    runs-on: ubuntu-latest
    container:
      image: ruby:${{ env.ruby-version }}
      env:
        BUNDLE_JOBS: 3
        BUNDLE_RETRY: 3
        CONTINUOUS_INTEGRATION: true
        DB_HOST: localhost
        DB_USER: root
        DISABLE_SIMPLECOV: true
        RAILS_ENV: test
    needs:
    - build
    steps:
    - name: Set up bundler cache
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: .ruby-version
        bundler-cache: true
    - uses: actions/checkout@v3
    - uses: "./.github/actions/install-system-dependencies"
    - uses: "./.github/actions/install-ruby-dependencies"
      with:
        ruby-version: '3.0'
    - uses: "./.github/actions/wait-db"
    - name: Create database
      run: "./bin/rails db:create"
    - name: Run migrations up to v2.0.0
      run: "./bin/rails db:migrate VERSION=20171010025614"
    - name: Populate database with test data
      run: "./bin/rails tests:migrations:populate_v2"
    - name: Run pre-deployment migrations up to v2.4.0
      run: "./bin/rails db:migrate VERSION=20180514140000"
      env:
        SKIP_POST_DEPLOYMENT_MIGRATIONS: true
    - name: Populate database with test data
      run: "./bin/rails tests:migrations:populate_v2_4"
    - name: Run migrations up to v2.4.3
      run: "./bin/rails db:migrate VERSION=20180707154237"
      env:
        SKIP_POST_DEPLOYMENT_MIGRATIONS: true
    - name: Populate database with test data
      run: "./bin/rails tests:migrations:populate_v2_4_3"
    - name: Run all remaining pre-deployment migrations
      run: "./bin/rails db:migrate"
      env:
        SKIP_POST_DEPLOYMENT_MIGRATIONS: true
    - name: Run all post-deployment migrations
      run: "./bin/rails db:migrate"
    - name: Check migration result
      run: "./bin/rails tests:migrations:check_database"
  node_run:
    runs-on: ubuntu-latest
    needs:
    - build
    steps:
    - uses: actions/checkout@v3
    - id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
    - uses: actions/cache@v3.2.2
      with:
        path: "${{ steps.yarn-cache-dir-path.outputs.dir }}"
        key: "${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}"
        restore-keys: "${{ runner.os }}-yarn-"
    - run: yarn install --frozen-lockfile
    - run: yarn run test:jest
